/*
 * This file is generated by jOOQ.
 */
package com.example.RestaurantManagement.model.tables;


import com.example.RestaurantManagement.model.Indexes;
import com.example.RestaurantManagement.model.Keys;
import com.example.RestaurantManagement.model.Public;
import com.example.RestaurantManagement.model.tables.records.RecipeManagementRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RecipeManagement extends TableImpl<RecipeManagementRecord> {

    private static final long serialVersionUID = -947750727;

    /**
     * The reference instance of <code>public.recipe_management</code>
     */
    public static final RecipeManagement RECIPE_MANAGEMENT = new RecipeManagement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecipeManagementRecord> getRecordType() {
        return RecipeManagementRecord.class;
    }

    /**
     * The column <code>public.recipe_management.recipe_id</code>.
     */
    public final TableField<RecipeManagementRecord, Integer> RECIPE_ID = createField(DSL.name("recipe_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('recipe_dish_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.recipe_management.recipe_name</code>.
     */
    public final TableField<RecipeManagementRecord, String> RECIPE_NAME = createField(DSL.name("recipe_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.recipe_management.cuisine</code>.
     */
    public final TableField<RecipeManagementRecord, String> CUISINE = createField(DSL.name("cuisine"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.recipe_management.cook_time</code>.
     */
    public final TableField<RecipeManagementRecord, OffsetDateTime> COOK_TIME = createField(DSL.name("cook_time"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>public.recipe_management</code> table reference
     */
    public RecipeManagement() {
        this(DSL.name("recipe_management"), null);
    }

    /**
     * Create an aliased <code>public.recipe_management</code> table reference
     */
    public RecipeManagement(String alias) {
        this(DSL.name(alias), RECIPE_MANAGEMENT);
    }

    /**
     * Create an aliased <code>public.recipe_management</code> table reference
     */
    public RecipeManagement(Name alias) {
        this(alias, RECIPE_MANAGEMENT);
    }

    private RecipeManagement(Name alias, Table<RecipeManagementRecord> aliased) {
        this(alias, aliased, null);
    }

    private RecipeManagement(Name alias, Table<RecipeManagementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RecipeManagement(Table<O> child, ForeignKey<O, RecipeManagementRecord> key) {
        super(child, key, RECIPE_MANAGEMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RECIPE_PKEY);
    }

    @Override
    public Identity<RecipeManagementRecord, Integer> getIdentity() {
        return Keys.IDENTITY_RECIPE_MANAGEMENT;
    }

    @Override
    public UniqueKey<RecipeManagementRecord> getPrimaryKey() {
        return Keys.RECIPE_PKEY;
    }

    @Override
    public List<UniqueKey<RecipeManagementRecord>> getKeys() {
        return Arrays.<UniqueKey<RecipeManagementRecord>>asList(Keys.RECIPE_PKEY);
    }

    @Override
    public RecipeManagement as(String alias) {
        return new RecipeManagement(DSL.name(alias), this);
    }

    @Override
    public RecipeManagement as(Name alias) {
        return new RecipeManagement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeManagement rename(String name) {
        return new RecipeManagement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RecipeManagement rename(Name name) {
        return new RecipeManagement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, OffsetDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
