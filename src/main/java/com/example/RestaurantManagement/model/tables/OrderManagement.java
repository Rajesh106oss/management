/*
 * This file is generated by jOOQ.
 */
package com.example.RestaurantManagement.model.tables;


import com.example.RestaurantManagement.model.Indexes;
import com.example.RestaurantManagement.model.Keys;
import com.example.RestaurantManagement.model.Public;
import com.example.RestaurantManagement.model.tables.records.OrderManagementRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderManagement extends TableImpl<OrderManagementRecord> {

    private static final long serialVersionUID = -776403195;

    /**
     * The reference instance of <code>public.order_management</code>
     */
    public static final OrderManagement ORDER_MANAGEMENT = new OrderManagement();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderManagementRecord> getRecordType() {
        return OrderManagementRecord.class;
    }

    /**
     * The column <code>public.order_management.order_id</code>.
     */
    public final TableField<OrderManagementRecord, Integer> ORDER_ID = createField(DSL.name("order_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('order_management_order_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.order_management.food_name</code>.
     */
    public final TableField<OrderManagementRecord, String> FOOD_NAME = createField(DSL.name("food_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.order_management.quantity</code>.
     */
    public final TableField<OrderManagementRecord, String> QUANTITY = createField(DSL.name("quantity"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.order_management.price</code>.
     */
    public final TableField<OrderManagementRecord, Integer> PRICE = createField(DSL.name("price"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.order_management</code> table reference
     */
    public OrderManagement() {
        this(DSL.name("order_management"), null);
    }

    /**
     * Create an aliased <code>public.order_management</code> table reference
     */
    public OrderManagement(String alias) {
        this(DSL.name(alias), ORDER_MANAGEMENT);
    }

    /**
     * Create an aliased <code>public.order_management</code> table reference
     */
    public OrderManagement(Name alias) {
        this(alias, ORDER_MANAGEMENT);
    }

    private OrderManagement(Name alias, Table<OrderManagementRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderManagement(Name alias, Table<OrderManagementRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OrderManagement(Table<O> child, ForeignKey<O, OrderManagementRecord> key) {
        super(child, key, ORDER_MANAGEMENT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDER_MANAGEMENT_PKEY);
    }

    @Override
    public Identity<OrderManagementRecord, Integer> getIdentity() {
        return Keys.IDENTITY_ORDER_MANAGEMENT;
    }

    @Override
    public UniqueKey<OrderManagementRecord> getPrimaryKey() {
        return Keys.ORDER_MANAGEMENT_PKEY;
    }

    @Override
    public List<UniqueKey<OrderManagementRecord>> getKeys() {
        return Arrays.<UniqueKey<OrderManagementRecord>>asList(Keys.ORDER_MANAGEMENT_PKEY);
    }

    @Override
    public OrderManagement as(String alias) {
        return new OrderManagement(DSL.name(alias), this);
    }

    @Override
    public OrderManagement as(Name alias) {
        return new OrderManagement(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderManagement rename(String name) {
        return new OrderManagement(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderManagement rename(Name name) {
        return new OrderManagement(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
